#!/usr/bin/env python3
"""
PrometheusGPT Mini - Phase 6 Runner
Author: MagistrTheOne, Krasnodar, 2025

–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Phase 6: Advanced Fine-tuning & Specialization
"""

import os
import sys
import argparse
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(str(Path(__file__).parent.parent))

from src.model import PrometheusGPTMini, model_config
from src.domain.military_finetuner import MilitaryDocumentFineTuner
from src.monitoring.logging_config import setup_logging

def setup_phase6_logging():
    """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è Phase 6"""
    
    return setup_logging(
        log_level="INFO",
        log_dir="logs/phase6",
        log_format="json",
        enable_console=True,
        enable_file=True,
        log_requests=True,
        log_performance=True
    )

def create_sample_military_data():
    """–°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–º–µ—Ä –≤–æ–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    sample_data = [
        {
            "text": "–û–ø–µ—Ä–∞—Ü–∏—è <operation> –Ω–∞—á–∞–ª–∞—Å—å –≤ <location> –≤ 06:00. <military_unit> –ø–æ–ª—É—á–∏–ª–∞ –ø—Ä–∏–∫–∞–∑ –æ <classified> –¥–µ–π—Å—Ç–≤–∏—è—Ö.",
            "classification_level": "confidential",
            "domain": "military_operations"
        },
        {
            "text": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ <equipment> –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ <location>. <personnel> –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ —Å–∏—Å—Ç–µ–º—ã.",
            "classification_level": "restricted",
            "domain": "equipment_maintenance"
        },
        {
            "text": "–û—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ <military_unit> –≤ <location>. –í—Å–µ <equipment> —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ.",
            "classification_level": "unclassified",
            "domain": "status_report"
        },
        {
            "text": "–ü–ª–∞–Ω <operation> –≤–∫–ª—é—á–∞–µ—Ç <classified> —ç–ª–µ–º–µ–Ω—Ç—ã. <personnel> –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≥–æ—Ç–æ–≤—ã –∫ <restricted> –¥–µ–π—Å—Ç–≤–∏—è–º.",
            "classification_level": "secret",
            "domain": "operation_planning"
        },
        {
            "text": "–û–±—É—á–µ–Ω–∏–µ <personnel> –Ω–∞ <equipment> –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ. <military_unit> –≥–æ—Ç–æ–≤–∞ –∫ <operation>.",
            "classification_level": "confidential",
            "domain": "training_report"
        }
    ]
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
    data_dir = Path("data/phase6")
    data_dir.mkdir(parents=True, exist_ok=True)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
    with open(data_dir / "military_documents.jsonl", "w", encoding="utf-8") as f:
        for doc in sample_data:
            f.write(f"{json.dumps(doc, ensure_ascii=False)}\n")
    
    print(f"Created sample military data: {data_dir / 'military_documents.jsonl'}")
    return str(data_dir / "military_documents.jsonl")

def run_military_fine_tuning(args):
    """–ó–∞–ø—É—Å–∫ fine-tuning –¥–ª—è –≤–æ–µ–Ω–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
    
    logger = logging.getLogger(__name__)
    logger.info("Starting Phase 6: Military Document Fine-tuning")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if not Path(args.military_data_path).exists():
        logger.info("Creating sample military data...")
        args.military_data_path = create_sample_military_data()
    
    # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –º–æ–¥–µ–ª—å
    logger.info("Loading base model...")
    model = PrometheusGPTMini(config=model_config)
    
    # –°–æ–∑–¥–∞–µ–º fine-tuner
    logger.info("Initializing military fine-tuner...")
    fine_tuner = MilitaryDocumentFineTuner(
        base_model=model,
        military_data_path=args.military_data_path
    )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º fine-tuning
    logger.info("Starting military document fine-tuning...")
    results = fine_tuner.fine_tune_military_model(
        epochs=args.epochs,
        learning_rate=args.learning_rate,
        batch_size=args.batch_size,
        save_path=args.save_path
    )
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    logger.info("Fine-tuning completed!")
    logger.info(f"Training history: {results['training_history']}")
    logger.info(f"Military metrics: {results['military_metrics']}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
    if args.test_generation:
        logger.info("Testing military text generation...")
        test_prompts = [
            "–û–ø–µ—Ä–∞—Ü–∏—è –Ω–∞—á–∞–ª–∞—Å—å –≤",
            "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ",
            "–û—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏"
        ]
        
        for prompt in test_prompts:
            generated = fine_tuner.generate_military_text(prompt, max_length=50)
            logger.info(f"Prompt: {prompt}")
            logger.info(f"Generated: {generated}")
            print(f"Prompt: {prompt}")
            print(f"Generated: {generated}")
            print("-" * 50)
    
    return results

def run_phase6_evaluation(args):
    """–ó–∞–ø—É—Å–∫ –æ—Ü–µ–Ω–∫–∏ Phase 6"""
    
    logger = logging.getLogger(__name__)
    logger.info("Starting Phase 6 evaluation...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å
    if not Path(args.model_path).exists():
        logger.error(f"Model not found: {args.model_path}")
        return None
    
    # –°–æ–∑–¥–∞–µ–º fine-tuner —Å –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª—å—é
    model = PrometheusGPTMini(config=model_config)
    fine_tuner = MilitaryDocumentFineTuner(
        base_model=model,
        military_data_path=args.military_data_path
    )
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–µ—Å–∞
    checkpoint = torch.load(args.model_path, map_location='cpu')
    fine_tuner.base_model.load_state_dict(checkpoint['model_state_dict'])
    
    # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
    metrics = fine_tuner.get_military_metrics()
    
    logger.info("Phase 6 evaluation completed!")
    logger.info(f"Military metrics: {metrics}")
    
    return metrics

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    parser = argparse.ArgumentParser(description="PrometheusGPT Mini - Phase 6 Runner")
    parser.add_argument("--mode", choices=["fine_tune", "evaluate", "test"], 
                       default="fine_tune", help="Mode to run")
    parser.add_argument("--military_data_path", type=str, 
                       default="data/phase6/military_documents.jsonl",
                       help="Path to military documents")
    parser.add_argument("--epochs", type=int, default=5, 
                       help="Number of training epochs")
    parser.add_argument("--learning_rate", type=float, default=1e-5, 
                       help="Learning rate")
    parser.add_argument("--batch_size", type=int, default=4, 
                       help="Batch size")
    parser.add_argument("--save_path", type=str, 
                       default="checkpoints/phase6/military_model.pt",
                       help="Path to save model")
    parser.add_argument("--model_path", type=str, 
                       default="checkpoints/phase6/military_model.pt",
                       help="Path to load model")
    parser.add_argument("--test_generation", action="store_true", 
                       help="Test text generation after training")
    
    args = parser.parse_args()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    setup_phase6_logging()
    
    print("=== PrometheusGPT Mini - Phase 6 Runner ===")
    print("Author: MagistrTheOne, Krasnodar, 2025")
    print(f"Mode: {args.mode}")
    print("=" * 60)
    
    if args.mode == "fine_tune":
        results = run_military_fine_tuning(args)
        if results:
            print("‚úÖ Phase 6 fine-tuning completed successfully!")
        else:
            print("‚ùå Phase 6 fine-tuning failed!")
    
    elif args.mode == "evaluate":
        metrics = run_phase6_evaluation(args)
        if metrics:
            print("‚úÖ Phase 6 evaluation completed successfully!")
            print(f"Military metrics: {metrics}")
        else:
            print("‚ùå Phase 6 evaluation failed!")
    
    elif args.mode == "test":
        print("üß™ Testing Phase 6 components...")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        print("‚úÖ Phase 6 components test completed!")

if __name__ == "__main__":
    import json
    import torch
    main()
